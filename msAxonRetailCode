ProductService ---------------------------------------------
POST: https://localhost:8080/api/v1/products
GET: https://localhost:8080/api/v1/products
GET: https://localhost:8080/api/v1/products/{productId}
DELETE: https://localhost:8080/api/v1/products/{productId}
PATCH: https://localhost:8080/api/v1/products/{productId}
------------------------------------------------------------------
ProductCommandController(Controller class for POST/DELETE/PATCH request)
ProductDto(Product request dto/payload class - POJO - common class)
CreateProductCommand(Product command for creation - POJO)
ProductAggregate(Aggregate class)
ProductCreatedEvent (Product created event class - POJO)
Product(Entity class - POJO - common class)
ProductEventHandler( product event handler class)
++++
ProductQueryController(Controller class for GET request)
GetProductQuery(product query for get/fetch - POJO)
ProductPrjection(product projection class to handle get query)
------------------------------------------------------------------
Let 1st implement GET request to fetch all created products
GetProductQuery.java
public class GetProductQuery{}
ProductPrjection.java
@Component public class ProductPrjection{
  @Autowired private ProductRepository repo;
  @QueryHandler public List<ProductDto> handle(GetProductQuery queryProjection){
    List<Product> products = repo.findAll();// list of entity objects
	List<ProductDto> productDtoList =   products.stream().map(product->productDto.builder().price(product.getPrice()).build()).collect(Collectors.toList());
	
	return productDtoList;
  }
}
	
ProductQueryController.java
@ReqeustController @RequestMapping("/api/v1/products")
public class ProductQueryController{
  @Autowired private QueryGateway queryGateway;
  @GetMapping public List<ProductDto> getAllProducts(){
    GetProductQuery queryProduct = new GetProductQuery();
	List<ProductDto> productDtoList = queryGateway.query(queryProduct, ResponseType.multipleInstancesOf(ProductDto.class).join());
	return productDtoList;
  }
}
